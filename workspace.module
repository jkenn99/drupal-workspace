<?php

/********************************************************************
* Drupal Hooks :: General Overview
********************************************************************/

/**
* Implementation of hook_help().
*/
function workspace_help($section) {
  $output = "";

  switch ($section) {
    case 'admin/modules#description':
    $output .= 'For individual users to manage their workspace';
    break;
  }

  return t($output);
}

/**
* Implementation of hook_menu().
*/
function workspace_menu($may_cache) {

  global $user;
  $items = array();

  $access = user_access('access content') && ($user->uid > 0);
  
  if ($may_cache) {
    $items[] = array(
      'path' => 'workspace', 
      'title' => t('my workspace'),
      'callback' => 'workspace_admin', 
      'access' => $access);

    $items[] = array(
      'path' => 'workspace/list', 
      'title' => t('list'),
      'type' => MENU_DEFAULT_LOCAL_TASK, 
      'weight' => -10);

    $items[] = array(
      'path' => 'workspace/configure', 
      'title' => t('configure'),
      'callback' => 'workspace_configure', 
      'access' => user_access('administer own workspace'),
      'type' => MENU_LOCAL_TASK);

    $items[] = array(
      'path' => 'workspace/delete', 
      'title' => t('delete'),
      'callback' => 'workspace_delete', 
      'type' => MENU_CALLBACK);
    //$items[] = array('path' => 'workspace/sharing', 'title' => t('sharing'), 'type' => MENU_LOCAL_TASK);
  }

   return $items;
}

/**
* Implementation of hook_perm().
*/
function workspace_perm() {
  return array('administer own workspace');
}

/********************************************************************
* Drupal Hooks :: Core Hooks
********************************************************************/

/********************************************************************
* Module Functions :: Controllers
********************************************************************/

function workspace_admin() {
  global $user;
  $op     = $_POST['op'];
  $edit   = $_POST['edit'];
  $type   = $edit['content_type'];
  $output = '';

  // if no content type is specified, go to create content page
  if ($type == t('Select...')) {
    $type = '';
  }

  switch ($op) {
    case t('Add new item'):
      drupal_goto("node/add/$type");
      break;

    default:
      
      $output = workspace_list();
  }
 
  $title = t('workspace') . ' : ' . $user->name;
  drupal_set_title($title);
  print theme('page', $output);
}

function workspace_configure() {
  global $user;
  $op     = $_POST['op'];
  $edit   = $_POST['edit'];
  $output = '';

  switch ($op) {
    case t('Save configuration'):
    if (workspace_validate($edit)) {
      workspace_save($edit);
    }
  }
  $output = workspace_configure_form($edit);

  $title = t('workspace : %username', array('%username' => $user->name));
  print theme('page', $output, $title);
}

/********************************************************************
* Module Functions :: Views
********************************************************************/

/**
* The default admin interface is a list of content.
*/
function workspace_list() {
  global $user;
  $maxnodes = $user->workspaces ? $user->workspaces['default']['maxnodes'] : 50;
  $maxfilenames = $user->workspaces ? $user->workspaces['default']['maxfilenames'] : 50;
  if (!is_numeric($maxnodes)) {$maxnodes = 50;}
  if (!is_numeric($maxfilenames)) {$maxfilenames = 50;}

  $comments_enabled = module_exist('comment');
  
  $output = workspace_addform();
  
  $sql = "SELECT n.nid, n.type, 0 AS cid, n.title, n.status, n.changed, s.comment_count, 1 AS node FROM {node} n LEFT OUTER JOIN {node_comment_statistics} s ON n.nid = s.nid WHERE n.uid = $user->uid UNION SELECT c.nid AS cnid, '' AS type, c.cid, c.subject, c.status, c.timestamp, c.pid, 0 FROM {comments} AS c WHERE c.uid = $user->uid";

  $count_query = "SELECT COUNT(DISTINCT c.cid) + COUNT(DISTINCT n.nid) FROM {node} n, {comments} c WHERE n.uid = $user->uid and c.uid = $user->uid";

  if (!$comments_enabled) {
    $sql = "SELECT n.nid, n.type, 0 AS cid, n.title, n.status, n.changed, s.comment_count, 1 AS node FROM {node} n LEFT OUTER JOIN {node_comment_statistics} s on n.nid = s.nid WHERE n.uid = $user->uid ";

    $count_query = "SELECT COUNT(DISTINCT n.nid) FROM {node} n WHERE n.uid = $user->uid";
  }
 
   // build the combined node/comment listing
  $header = array(
    array('data' => t('Type'), 'field' => 'type'),
    array('data' => t('Title'), 'field' => 'title'),
    array('data' => t('Owner'), 'field' => 'uid'),
    array('data' => t('Published'), 'field' => 'status'),
    array('data' => t('Modified'), 'field' => 'changed', 'sort' => 'desc'),
    $comments_enabled ? array('data' => t('Replies'), 'field' => 'comment_count') : array('data' => ''),
    array('data' => t('Operations'), 'colspan' => 2)
  );

  $result = pager_query($sql . tablesort_sql($header), $maxnodes, 1, $count_query);

  $yes = t('yes');
  $no = t('no');
    
  while ($row = db_fetch_object($result)) {    
    // it's a node
    if ($row->node == 1) {
      $rows[] = array(
        node_invoke($row->type, 'node_name'), 
        l($row->title, "node/$row->nid"), 
        $user->name, $row->status ? $yes : $no, format_date($row->changed, 'small'), 
        $comments_enabled ? array('data' => $row->comment_count ? $row->comment_count : 0, 'align' => 'right') : array('data' => ''), 
        l(t(edit), 
        "node/$row->nid/edit"), 
        l(t('delete'), 
        "workspace/delete/$row->nid")
        );   
    }
    else {
      // it's a comment
      $num_replies = comment_num_replies($row->cid);
      $comment->cid = $row->cid;
      $comment->nid = $row->nid;
    
      // delegate access permission checks and link generation to comments.module
      $com_links = comment_links($comment, 0);
      $link = l(t('edit'), "comment/edit/$comment->cid");
      $edit_link = in_array($link, $com_links) ? $link : '';
      
      if (!$edit_link) {
    	  $admin_edit_link = l(t('edit'), "admin/comment/edit/$comment->cid");
    	  $edit_link = in_array($admin_edit_link, $com_links) ? $admin_edit_link : '';
      }
      
      $link = l(t('delete'), "admin/comment/$comment->cid/delete");
      $delete_link = in_array($link, $com_links) ? $link : '';
    
      $rows[] = array(t('comment'), l($row->title, "node/$row->nid#comment-$row->cid"), $user->name, $row->status ? $no : $yes, format_date($row->changed, 'small'), array('data' => $num_replies, 'align' => 'right'), $edit_link, $delete_link);
    }
  }

  if ($rows) {
    $pager = theme('pager', NULL, $maxnodes, 0, tablesort_pager());
    if (!empty($pager)) {
      $rows[] = array(array('data' => $pager, 'colspan' => 5));
    }
    $output .= theme('table', $header, $rows);
  }
  else {
    $output .= t('Your workspace is currently empty.');
  }

  // build the attachment listing
  $rows = array();
  $header = array(
    array('data' => t('Type'), 'field' => 'filemime'),
    array('data' => t('Filename'), 'field' => 'filename'),
    array('data' => t('Size'), 'field' => 'size')
  );

  $result = pager_query("SELECT n.nid, f.filemime, f.filename, f.filesize FROM {files} f, {node} n WHERE n.uid = $user->uid AND n.nid = f.nid" . tablesort_sql($header), $maxfilenames, 2);

  while ($row = db_fetch_object($result)) {
        $rows[] = array($row->filemime, l($row->filename, "node/$row->nid"), format_size($row->filesize));
  }

  if ($rows) {
    $output .= '<h3>' . t('Files') . '</h3>';
    $pager = theme('pager', NULL, $maxfilenames, 0, tablesort_pager());
    if (!empty($pager)) {
      $rows[] = array(array('data' => $pager, 'colspan' => 3));
    }

    $output .= theme('table', $header, $rows);
  }

  return $output;
}

/**
* The configuration page.
*/
function workspace_configure_form() {
  global $user;
  
  $maxnodes = $user->workspaces ? $user->workspaces['default']['maxnodes'] : 50;
  $output .= form_textfield(t('Number of items'), 'maxnodes', $maxnodes, '4', '5', t('Maximum number of items to display in your workspace.'));
  $maxfilenames = $user->workspaces ? $user->workspaces['default']['maxfilenames'] : 50;
  $output .= form_textfield(t('Number of files'), 'maxfilenames', $maxfilenames, '4', '5', t('Maximum number of filenames to display in your workspace.'));
  $output .= form_submit(t('Save configuration'));
  return form($output);
}

/**
 * The deletion menu callback
 */
function workspace_delete() {
  $edit = isset($_POST['edit']) ? $_POST['edit'] : array();
  $nid = intval(arg(2));
  $edit['nid'] = $nid;
  print theme('page', node_delete($edit)); 
} 

/********************************************************************
* Module Functions :: Private
********************************************************************/

function workspace_addform() {
  global $user;
  $description = t('Choose what kind of content you would like to add.');
  $select = t('Select...');
  $options = array($select => $select);
  foreach (node_list() as $type) {
    if (node_access('create', $type, $user->uid)) {
      $options[$type] = node_invoke($type, 'node_name');
    }
  }

  $section = form_select(t('Add content'), 'content_type', '', $options, $description);
  $submit = form_submit(t('Add new item'));
  
  // place submit button to the right of selectbox, not below it
  $output = str_replace('</select>', '</select>&nbsp;' . $submit, $section);
  return form($output);
}

function workspace_validate($edit) {
  $errors = array();

  if (!is_numeric($edit['maxnodes'])) {
    $errors['maxnodes'] = t('Please enter a numeric value.');
  }
  if (!is_numeric($edit['maxfilenames'])) {
    $errors['maxnodes'] = t('Please enter a numeric value.');
  }
  foreach ($errors as $name => $message) {
    form_set_error($name, $message);
  }

  return count($errors) == 0;
}

/********************************************************************
* Module Functions :: Loaders
********************************************************************/

/********************************************************************
* Module Functions :: Setters
********************************************************************/

function workspace_save($edit) {
  global $user;
  if (!$user->workspaces) {
    $user->workspaces = array();
  }
  $user->workspaces['default']['maxnodes'] = $edit['maxnodes'];
  $user->workspaces['default']['maxfilenames'] = $edit['maxfilenames'];
  return user_save($user, array('workspaces' => $user->workspaces));
}
?>
